From 0c8bbbfee8966f73ec1e156838883875e1028a35 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Fri, 6 Nov 2015 17:19:57 -0800
Subject: [PATCH 01/12] The initial sketch of the classloader filtering

---
 .../security/RemotingFilterClassLoader.java        | 44 ++++++++++++++++++++++
 1 file changed, 44 insertions(+)
 create mode 100644 core/src/main/java/jenkins/security/RemotingFilterClassLoader.java

diff --git a/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java b/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
new file mode 100644
index 00000000000..4502190a6ec
--- /dev/null
+++ b/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
@@ -0,0 +1,44 @@
+package jenkins.security;
+
+import org.apache.commons.collections.Transformer;
+import org.codehaus.groovy.runtime.ConversionHandler;
+
+import javax.xml.transform.Templates;
+
+/**
+ * Prevents problematic classes from getting de-serialized.
+ *
+ * @author Kohsuke Kawaguchi
+ */
+public class RemotingFilterClassLoader extends ClassLoader {
+    private final ClassLoader actual;
+
+    public RemotingFilterClassLoader(ClassLoader actual) {
+        // intentionally not passing 'actual' as the parent classloader to the super type
+        // to prevent accidental bypassing of a filter.
+        this.actual = actual;
+    }
+
+    @Override
+    public Class<?> loadClass(String name) throws ClassNotFoundException {
+        if (isBlacklisted(name))    throw new ClassNotFoundException(name);
+        Class<?> c = actual.loadClass(name);
+        if (isBlacklisted(c))       throw new ClassNotFoundException(name);
+        return c;
+    }
+
+    protected boolean isBlacklisted(String name) {
+        return false;
+    }
+
+    protected boolean isBlacklisted(Class c) {
+        if (Transformer.class.isAssignableFrom(c))
+            return true;
+        if (ConversionHandler.class.isAssignableFrom(c))
+            return true;
+        if (Templates.class.isAssignableFrom(c))
+            return true;
+
+        return false;
+    }
+}

From 8622080ccf10c63fccc962691b2f23d92fa1821c Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Fri, 6 Nov 2015 18:02:50 -0800
Subject: [PATCH 02/12] Switching to name based filtering

... in case plugins bring their own copies of those classes
---
 .../security/RemotingFilterClassLoader.java        | 89 +++++++++++++++++++++-
 1 file changed, 85 insertions(+), 4 deletions(-)

diff --git a/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java b/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
index 4502190a6ec..4c621c2dfff 100644
--- a/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
+++ b/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
@@ -1,9 +1,5 @@
 package jenkins.security;
 
-import org.apache.commons.collections.Transformer;
-import org.codehaus.groovy.runtime.ConversionHandler;
-
-import javax.xml.transform.Templates;
 
 /**
  * Prevents problematic classes from getting de-serialized.
@@ -28,17 +24,102 @@ public RemotingFilterClassLoader(ClassLoader actual) {
     }
 
     protected boolean isBlacklisted(String name) {
+        // these are coming from libraries, so protecting it by name is better as
+        // some plugins might be bundling them and choosing to mask ones from core.
+        if (name.startsWith("org.codehaus.groovy.runtime."))
+            return true;    // ConvertedClosure is named in exploit
+        if (name.startsWith("org.apache.commons.collections.functors."))
+            return true;    // InvokerTransformer, InstantiateFactory, InstantiateTransformer are particularly scary
+
+        // this package can appear in ordinary xalan.jar or com.sun.org.apache.xalan
+        // the target is trax.TemplatesImpl
+        if (name.contains("org.apache.xalan"))
+            return true;
         return false;
     }
 
     protected boolean isBlacklisted(Class c) {
+        /* Switched to blacklisting by name.
+
+import org.apache.commons.collections.Transformer;
+import org.codehaus.groovy.runtime.ConversionHandler;
+
+import javax.xml.transform.Templates;
+
         if (Transformer.class.isAssignableFrom(c))
             return true;
         if (ConversionHandler.class.isAssignableFrom(c))
             return true;
         if (Templates.class.isAssignableFrom(c))
             return true;
+        */
 
         return false;
     }
 }
+
+/*
+    Publicized attack payload:
+
+		ObjectInputStream.readObject()
+			PriorityQueue.readObject()
+				Comparator.compare() (Proxy)
+					ConvertedClosure.invoke()
+						MethodClosure.call()
+							...
+						  		Method.invoke()
+									Runtime.exec()
+
+
+		ObjectInputStream.readObject()
+			AnnotationInvocationHandler.readObject()
+				Map(Proxy).entrySet()
+					AnnotationInvocationHandler.invoke()
+						LazyMap.get()
+							ChainedTransformer.transform()
+								ConstantTransformer.transform()
+								InvokerTransformer.transform()
+									Method.invoke()
+										Class.getMethod()
+								InvokerTransformer.transform()
+									Method.invoke()
+										Runtime.getRuntime()
+								InvokerTransformer.transform()
+									Method.invoke()
+										Runtime.exec()
+
+
+		ObjectInputStream.readObject()
+			PriorityQueue.readObject()
+				...
+					TransformingComparator.compare()
+						InvokerTransformer.transform()
+							Method.invoke()
+								Runtime.exec()
+
+
+		ObjectInputStream.readObject()
+			SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()
+				SerializableTypeWrapper.TypeProvider(Proxy).getType()
+					AnnotationInvocationHandler.invoke()
+						HashMap.get()
+				ReflectionUtils.findMethod()
+				SerializableTypeWrapper.TypeProvider(Proxy).getType()
+					AnnotationInvocationHandler.invoke()
+						HashMap.get()
+				ReflectionUtils.invokeMethod()
+					Method.invoke()
+						Templates(Proxy).newTransformer()
+							AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()
+								ObjectFactory(Proxy).getObject()
+									AnnotationInvocationHandler.invoke()
+										HashMap.get()
+								Method.invoke()
+									TemplatesImpl.newTransformer()
+										TemplatesImpl.getTransletInstance()
+											TemplatesImpl.defineTransletClasses()
+												TemplatesImpl.TransletClassLoader.defineClass()
+													Pwner*(Javassist-generated).<static init>
+														Runtime.exec()
+
+ */

From 71b341013e319aee689741f4b26d28f6a008b00d Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Fri, 6 Nov 2015 19:50:47 -0800
Subject: [PATCH 03/12] Reworked the fix.

Most of the changes are now in remoting.
---
 cli/src/main/java/hudson/cli/Connection.java       |   5 +-
 .../security/RemotingFilterClassLoader.java        | 125 ---------------------
 pom.xml                                            |   2 +-
 3 files changed, 5 insertions(+), 127 deletions(-)
 delete mode 100644 core/src/main/java/jenkins/security/RemotingFilterClassLoader.java

diff --git a/cli/src/main/java/hudson/cli/Connection.java b/cli/src/main/java/hudson/cli/Connection.java
index 165a6deb7e6..7f0bd9bbb1b 100644
--- a/cli/src/main/java/hudson/cli/Connection.java
+++ b/cli/src/main/java/hudson/cli/Connection.java
@@ -23,6 +23,8 @@
  */
 package hudson.cli;
 
+import hudson.remoting.ClassFilter;
+import hudson.remoting.ObjectInputStreamEx;
 import hudson.remoting.SocketChannelStream;
 import org.apache.commons.codec.binary.Base64;
 
@@ -107,7 +109,8 @@ public void writeObject(Object o) throws IOException {
      * Receives an object sent by {@link #writeObject(Object)}
      */
     public <T> T readObject() throws IOException, ClassNotFoundException {
-        ObjectInputStream ois = new ObjectInputStream(in);
+        ObjectInputStream ois = new ObjectInputStreamEx(in,
+                ClassFilter.DEFAULT.decorate(getClass().getClassLoader()));
         return (T)ois.readObject();
     }
 
diff --git a/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java b/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
deleted file mode 100644
index 4c621c2dfff..00000000000
--- a/core/src/main/java/jenkins/security/RemotingFilterClassLoader.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package jenkins.security;
-
-
-/**
- * Prevents problematic classes from getting de-serialized.
- *
- * @author Kohsuke Kawaguchi
- */
-public class RemotingFilterClassLoader extends ClassLoader {
-    private final ClassLoader actual;
-
-    public RemotingFilterClassLoader(ClassLoader actual) {
-        // intentionally not passing 'actual' as the parent classloader to the super type
-        // to prevent accidental bypassing of a filter.
-        this.actual = actual;
-    }
-
-    @Override
-    public Class<?> loadClass(String name) throws ClassNotFoundException {
-        if (isBlacklisted(name))    throw new ClassNotFoundException(name);
-        Class<?> c = actual.loadClass(name);
-        if (isBlacklisted(c))       throw new ClassNotFoundException(name);
-        return c;
-    }
-
-    protected boolean isBlacklisted(String name) {
-        // these are coming from libraries, so protecting it by name is better as
-        // some plugins might be bundling them and choosing to mask ones from core.
-        if (name.startsWith("org.codehaus.groovy.runtime."))
-            return true;    // ConvertedClosure is named in exploit
-        if (name.startsWith("org.apache.commons.collections.functors."))
-            return true;    // InvokerTransformer, InstantiateFactory, InstantiateTransformer are particularly scary
-
-        // this package can appear in ordinary xalan.jar or com.sun.org.apache.xalan
-        // the target is trax.TemplatesImpl
-        if (name.contains("org.apache.xalan"))
-            return true;
-        return false;
-    }
-
-    protected boolean isBlacklisted(Class c) {
-        /* Switched to blacklisting by name.
-
-import org.apache.commons.collections.Transformer;
-import org.codehaus.groovy.runtime.ConversionHandler;
-
-import javax.xml.transform.Templates;
-
-        if (Transformer.class.isAssignableFrom(c))
-            return true;
-        if (ConversionHandler.class.isAssignableFrom(c))
-            return true;
-        if (Templates.class.isAssignableFrom(c))
-            return true;
-        */
-
-        return false;
-    }
-}
-
-/*
-    Publicized attack payload:
-
-		ObjectInputStream.readObject()
-			PriorityQueue.readObject()
-				Comparator.compare() (Proxy)
-					ConvertedClosure.invoke()
-						MethodClosure.call()
-							...
-						  		Method.invoke()
-									Runtime.exec()
-
-
-		ObjectInputStream.readObject()
-			AnnotationInvocationHandler.readObject()
-				Map(Proxy).entrySet()
-					AnnotationInvocationHandler.invoke()
-						LazyMap.get()
-							ChainedTransformer.transform()
-								ConstantTransformer.transform()
-								InvokerTransformer.transform()
-									Method.invoke()
-										Class.getMethod()
-								InvokerTransformer.transform()
-									Method.invoke()
-										Runtime.getRuntime()
-								InvokerTransformer.transform()
-									Method.invoke()
-										Runtime.exec()
-
-
-		ObjectInputStream.readObject()
-			PriorityQueue.readObject()
-				...
-					TransformingComparator.compare()
-						InvokerTransformer.transform()
-							Method.invoke()
-								Runtime.exec()
-
-
-		ObjectInputStream.readObject()
-			SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()
-				SerializableTypeWrapper.TypeProvider(Proxy).getType()
-					AnnotationInvocationHandler.invoke()
-						HashMap.get()
-				ReflectionUtils.findMethod()
-				SerializableTypeWrapper.TypeProvider(Proxy).getType()
-					AnnotationInvocationHandler.invoke()
-						HashMap.get()
-				ReflectionUtils.invokeMethod()
-					Method.invoke()
-						Templates(Proxy).newTransformer()
-							AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()
-								ObjectFactory(Proxy).getObject()
-									AnnotationInvocationHandler.invoke()
-										HashMap.get()
-								Method.invoke()
-									TemplatesImpl.newTransformer()
-										TemplatesImpl.getTransletInstance()
-											TemplatesImpl.defineTransletClasses()
-												TemplatesImpl.TransletClassLoader.defineClass()
-													Pwner*(Javassist-generated).<static init>
-														Runtime.exec()
-
- */
diff --git a/pom.xml b/pom.xml
index cdd35ea1966..1583deeb0e5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -174,7 +174,7 @@ THE SOFTWARE.
       <dependency>
         <groupId>org.jenkins-ci.main</groupId>
         <artifactId>remoting</artifactId>
-        <version>2.47</version>
+        <version>2.53-SNAPSHOT</version>
       </dependency>
 
       <dependency>

From 2f617144e943c9ef3a8ea9730c92a37cb290e70d Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Fri, 20 Mar 2015 09:03:44 -0700
Subject: [PATCH 04/12] Updated to reflect changes in args4j SPI.

(cherry picked from commit 88e287a83bca22540a0c2476057d128088532c17)
---
 .../java/hudson/cli/declarative/MethodBinder.java  | 17 ++++++++++++++++
 .../src/main/java/hudson/util/ReflectionUtils.java | 23 +++++++++++++++++++++-
 2 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/core/src/main/java/hudson/cli/declarative/MethodBinder.java b/core/src/main/java/hudson/cli/declarative/MethodBinder.java
index 6b137727588..f9b8885e8ed 100644
--- a/core/src/main/java/hudson/cli/declarative/MethodBinder.java
+++ b/core/src/main/java/hudson/cli/declarative/MethodBinder.java
@@ -30,10 +30,12 @@
 import org.kohsuke.args4j.CmdLineException;
 import org.kohsuke.args4j.CmdLineParser;
 import org.kohsuke.args4j.Option;
+import org.kohsuke.args4j.spi.FieldSetter;
 import org.kohsuke.args4j.spi.Setter;
 import org.kohsuke.args4j.spi.OptionHandler;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.List;
@@ -79,6 +81,16 @@ public Class getType() {
                 public boolean isMultiValued() {
                     return false;
                 }
+
+                @Override
+                public FieldSetter asFieldSetter() {
+                    return null;
+                }
+
+                @Override
+                public AnnotatedElement asAnnotatedElement() {
+                    return p;
+                }
             };
             Option option = p.annotation(Option.class);
             if (option!=null) {
@@ -148,5 +160,10 @@ public boolean multiValued() {
         public Class<? extends Annotation> annotationType() {
             return base.annotationType();
         }
+
+        @Override
+        public boolean hidden() {
+            return base.hidden();
+        }
     }
 }
diff --git a/core/src/main/java/hudson/util/ReflectionUtils.java b/core/src/main/java/hudson/util/ReflectionUtils.java
index fb914acf531..f491b59d875 100644
--- a/core/src/main/java/hudson/util/ReflectionUtils.java
+++ b/core/src/main/java/hudson/util/ReflectionUtils.java
@@ -28,6 +28,7 @@
 
 import java.beans.PropertyDescriptor;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -122,7 +123,7 @@ public int size() {
         }
     }
 
-    public static final class Parameter {
+    public static final class Parameter implements AnnotatedElement {
         private final MethodInfo parent;
         private final int index;
 
@@ -180,6 +181,26 @@ public String name() {
                 return names[index];
             return null;
         }
+
+        @Override
+        public boolean isAnnotationPresent(Class<? extends Annotation> type) {
+            return annotation(type)!=null;
+        }
+
+        @Override
+        public <T extends Annotation> T getAnnotation(Class<T> type) {
+            return annotation(type);
+        }
+
+        @Override
+        public Annotation[] getAnnotations() {
+            return annotations();
+        }
+
+        @Override
+        public Annotation[] getDeclaredAnnotations() {
+            return annotations();
+        }
     }
 
     /**

From 12a970dffacc7c5d980a4c31b7fbb8c5990af535 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 11:10:09 -0800
Subject: [PATCH 05/12] A modest test case for the change

---
 cli/src/test/java/hudson/cli/ConnectionTest.java             | 12 ++++++++++++
 .../test/java/org/codehaus/groovy/runtime/Security218.java   | 11 +++++++++++
 2 files changed, 23 insertions(+)
 create mode 100644 cli/src/test/java/org/codehaus/groovy/runtime/Security218.java

diff --git a/cli/src/test/java/hudson/cli/ConnectionTest.java b/cli/src/test/java/hudson/cli/ConnectionTest.java
index 167198a1823..35c5afe52f3 100644
--- a/cli/src/test/java/hudson/cli/ConnectionTest.java
+++ b/cli/src/test/java/hudson/cli/ConnectionTest.java
@@ -2,6 +2,7 @@
 
 import hudson.remoting.FastPipedInputStream;
 import hudson.remoting.FastPipedOutputStream;
+import org.codehaus.groovy.runtime.Security218;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -69,4 +70,15 @@ public void run() {
             throw new Error("thread is still alive");
         }
     }
+
+    @Test
+    public void testSecurity218() throws Exception {
+        c1.writeObject(new Security218());
+        try {
+            c2.readObject();
+            fail();
+        } catch (SecurityException e) {
+            assertTrue(e.getMessage().contains(Security218.class.getName()));
+        }
+    }
 }
diff --git a/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java b/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
new file mode 100644
index 00000000000..9e2911271ae
--- /dev/null
+++ b/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
@@ -0,0 +1,11 @@
+package org.codehaus.groovy.runtime;
+
+import java.io.Serializable;
+
+/**
+ * Test payload.
+ *
+ * @author Kohsuke Kawaguchi
+ */
+public class Security218 implements Serializable {
+}

From a03c8b076385b15c80ae7ef0ed5c93258649cce1 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 12:01:29 -0800
Subject: [PATCH 06/12] Some ad-hoc integration-level testing with JenkinsRule

---
 .../test/groovy/hudson/cli/CLIActionTest.groovy    | 37 ++++++++++++++++++++--
 .../org/codehaus/groovy/runtime/Security218.java   | 21 ++++++++++++
 2 files changed, 56 insertions(+), 2 deletions(-)
 create mode 100644 test/src/test/java/org/codehaus/groovy/runtime/Security218.java

diff --git a/test/src/test/groovy/hudson/cli/CLIActionTest.groovy b/test/src/test/groovy/hudson/cli/CLIActionTest.groovy
index fce2f9fe629..99b4437e601 100644
--- a/test/src/test/groovy/hudson/cli/CLIActionTest.groovy
+++ b/test/src/test/groovy/hudson/cli/CLIActionTest.groovy
@@ -1,8 +1,10 @@
 package hudson.cli
 
+import hudson.Functions
 import hudson.remoting.Channel
-import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;
-
+import hudson.security.FullControlOnceLoggedInAuthorizationStrategy
+import org.codehaus.groovy.runtime.Security218
+import org.junit.Assert;
 import org.junit.Rule
 import org.junit.Test
 import org.jvnet.hudson.test.JenkinsRule
@@ -12,6 +14,8 @@ import org.jvnet.hudson.test.recipes.PresetData.DataSet;
 import java.util.concurrent.ExecutorService
 import java.util.concurrent.Executors
 
+import static org.junit.Assert.fail
+
 /**
  * @author Kohsuke Kawaguchi
  * @author christ66
@@ -37,6 +41,35 @@ class CLIActionTest {
         }
     }
 
+    @Test
+    public void security218() throws Exception {
+        pool = Executors.newCachedThreadPool()
+        try {
+            FullDuplexHttpStream con = new FullDuplexHttpStream(new URL(j.URL, "cli"));
+            Channel ch = new Channel("test connection", pool, con.inputStream, con.outputStream);
+            ch.call(new Security218());
+            fail("Expected the call to be rejected");
+        } catch (Exception e) {
+            assert Functions.printThrowable(e).contains("Rejected: "+Security218.class.name);
+        } finally {
+            pool.shutdown();
+        }
+
+    }
+
+    @Test
+    public void security218_take2() throws Exception {
+        pool = Executors.newCachedThreadPool()
+        try {
+            new CLI(j.URL).execute([new Security218()]);
+            fail("Expected the call to be rejected");
+        } catch (Exception e) {
+            assert Functions.printThrowable(e).contains("Rejected: "+Security218.class.name);
+        } finally {
+            pool.shutdown();
+        }
+    }
+
     //TODO: Integrate the tests into existing ones in CLIActionTest2
     @Test
     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)
diff --git a/test/src/test/java/org/codehaus/groovy/runtime/Security218.java b/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
new file mode 100644
index 00000000000..58841cc66fe
--- /dev/null
+++ b/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
@@ -0,0 +1,21 @@
+package org.codehaus.groovy.runtime;
+
+import org.jenkinsci.remoting.RoleChecker;
+
+import java.io.Serializable;
+
+/**
+ * Test payload.
+ *
+ * @author Kohsuke Kawaguchi
+ */
+public class Security218 implements Serializable, hudson.remoting.Callable<Void,RuntimeException> {
+    @Override
+    public Void call() throws RuntimeException {
+        return null;
+    }
+
+    @Override
+    public void checkRoles(RoleChecker checker) throws SecurityException {
+    }
+}

From b430d6d457c0a33627ca76de01b481db7236362b Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 13:26:43 -0800
Subject: [PATCH 07/12] [SECURITY-218]

Added a test case for master/slave communication.
---
 .../java/jenkins/security/Security218Test.java     | 116 +++++++++++++++++++++
 1 file changed, 116 insertions(+)
 create mode 100644 test/src/test/java/jenkins/security/Security218Test.java

diff --git a/test/src/test/java/jenkins/security/Security218Test.java b/test/src/test/java/jenkins/security/Security218Test.java
new file mode 100644
index 00000000000..6be86092a4d
--- /dev/null
+++ b/test/src/test/java/jenkins/security/Security218Test.java
@@ -0,0 +1,116 @@
+package jenkins.security;
+
+import hudson.model.Node.Mode;
+import hudson.model.Slave;
+import hudson.remoting.Channel;
+import hudson.remoting.Which;
+import hudson.slaves.DumbSlave;
+import hudson.slaves.JNLPLauncher;
+import hudson.slaves.RetentionStrategy;
+import org.apache.tools.ant.util.JavaEnvUtils;
+import org.codehaus.groovy.runtime.Security218;
+import org.junit.After;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import java.io.Serializable;
+import java.util.Collections;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author Kohsuke Kawaguchi
+ */
+@Issue("SECURITY-218")
+public class Security218Test implements Serializable {
+    @Rule
+    public transient JenkinsRule j = new JenkinsRule();
+
+    /**
+     * JNLP slave.
+     */
+    private Process jnlp;
+
+    /**
+     * Makes sure SECURITY-218 fix also applies to slaves.
+     *
+     * This test is for regular dumb slave
+     */
+    @Test
+    public void dumbSlave() throws Exception {
+        check(j.createOnlineSlave());
+    }
+
+    /**
+     * Makes sure SECURITY-218 fix also applies to slaves.
+     *
+     * This test is for JNLP slave
+     */
+    @Test
+    public void jnlpSlave() throws Exception {
+        DumbSlave s = createJnlpSlave("test");
+        launchJnlpSlave(s);
+        check(s);
+    }
+
+    @SuppressWarnings("ConstantConditions")
+    private void check(DumbSlave s) throws Exception {
+        try {
+            s.getComputer().getChannel().call(new MasterToSlaveCallable<Object, RuntimeException>() {
+                public Object call() {
+                    return new Security218();
+                }
+            });
+            fail("Expected the connection to die");
+        } catch (SecurityException e) {
+            assertTrue(e.getMessage().contains(Security218.class.getName()));
+        }
+    }
+
+// TODO: reconcile this duplicate with JnlpAccessWithSecuredHudsonTest
+    /**
+     * Creates a new slave that needs to be launched via JNLP.
+     *
+     * @see #launchJnlpSlave(Slave)
+     */
+    public DumbSlave createJnlpSlave(String name) throws Exception {
+        DumbSlave s = new DumbSlave(name, "", System.getProperty("java.io.tmpdir") + '/' + name, "2", Mode.NORMAL, "", new JNLPLauncher(), RetentionStrategy.INSTANCE, Collections.EMPTY_LIST);
+        j.jenkins.addNode(s);
+        return s;
+    }
+
+// TODO: reconcile this duplicate with JnlpAccessWithSecuredHudsonTest
+    /**
+     * Launch a JNLP slave created by {@link #createJnlpSlave(String)}
+     */
+    public Channel launchJnlpSlave(Slave slave) throws Exception {
+        j.createWebClient().goTo("computer/"+slave.getNodeName()+"/slave-agent.jnlp?encrypt=true", "application/octet-stream");
+        String secret = slave.getComputer().getJnlpMac();
+        // To watch it fail: secret = secret.replace('1', '2');
+        ProcessBuilder pb = new ProcessBuilder(JavaEnvUtils.getJreExecutable("java"),
+                "-jar", Which.jarFile(hudson.remoting.Launcher.class).getAbsolutePath(),
+                "-jnlpUrl", j.getURL() + "computer/"+slave.getNodeName()+"/slave-agent.jnlp", "-secret", secret);
+
+        pb.inheritIO();
+        System.err.println("Running: " + pb.command());
+
+        jnlp = pb.start();
+
+        for (int i = 0; i < /* one minute */600; i++) {
+            if (slave.getComputer().isOnline()) {
+                return slave.getComputer().getChannel();
+            }
+            Thread.sleep(100);
+        }
+
+        throw new AssertionError("JNLP slave agent failed to connect");
+    }
+
+    @After
+    public void tearDown() {
+        if (jnlp !=null)
+            jnlp.destroy();
+    }
+}

From 05b0a2a17ccfaee99ecda3f1e026de5fc44a5135 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 13:53:42 -0800
Subject: [PATCH 08/12] How is this payload rejected, you ask?

---
 cli/src/test/java/org/codehaus/groovy/runtime/Security218.java  | 2 +-
 test/src/test/java/org/codehaus/groovy/runtime/Security218.java | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java b/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
index 9e2911271ae..cc3dfeef041 100644
--- a/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
+++ b/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
@@ -3,7 +3,7 @@
 import java.io.Serializable;
 
 /**
- * Test payload.
+ * Test payload in a prohibited package name.
  *
  * @author Kohsuke Kawaguchi
  */
diff --git a/test/src/test/java/org/codehaus/groovy/runtime/Security218.java b/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
index 58841cc66fe..89cebafc815 100644
--- a/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
+++ b/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
@@ -5,7 +5,7 @@
 import java.io.Serializable;
 
 /**
- * Test payload.
+ * Test payload in a prohibited package name.
  *
  * @author Kohsuke Kawaguchi
  */

From 8fd067938ec32a056b6e6bf7ba620089e72b8b86 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 14:06:40 -0800
Subject: [PATCH 09/12] Explaining how a simulated attack works

---
 test/src/test/java/jenkins/security/Security218Test.java | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/test/src/test/java/jenkins/security/Security218Test.java b/test/src/test/java/jenkins/security/Security218Test.java
index 6be86092a4d..3cdeb5868c2 100644
--- a/test/src/test/java/jenkins/security/Security218Test.java
+++ b/test/src/test/java/jenkins/security/Security218Test.java
@@ -55,6 +55,10 @@ public void jnlpSlave() throws Exception {
         check(s);
     }
 
+    /**
+     * The attack scenario here is that a master sends a normal command to a slave and a slave
+     * inserts a malicious response.
+     */
     @SuppressWarnings("ConstantConditions")
     private void check(DumbSlave s) throws Exception {
         try {

From aff88a0679a08b4d0d49da1eda456b02631b3522 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 14:51:42 -0800
Subject: [PATCH 10/12] Test problem

anonymous Callable fails to serialize without this.

jnlpSlave(jenkins.security.Security218Test)  Time elapsed: 3.616 sec  <<< ERROR!
java.io.IOException: Unable to serialize jenkins.security.Security218Test$1@72a2ba17
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180)
    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1528)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1493)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1416)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174)
    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1528)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1493)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1416)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:346)
    at hudson.remoting.UserRequest._serialize(UserRequest.java:158)
    at hudson.remoting.UserRequest.serialize(UserRequest.java:167)
    at hudson.remoting.UserRequest.<init>(UserRequest.java:63)
    at hudson.remoting.Channel.call(Channel.java:779)
    at jenkins.security.Security218Test.check(Security218Test.java:65)
    at jenkins.security.Security218Test.jnlpSlave(Security218Test.java:55)
---
 test/src/test/java/jenkins/security/Security218Test.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/test/src/test/java/jenkins/security/Security218Test.java b/test/src/test/java/jenkins/security/Security218Test.java
index 3cdeb5868c2..7d4facc44a0 100644
--- a/test/src/test/java/jenkins/security/Security218Test.java
+++ b/test/src/test/java/jenkins/security/Security218Test.java
@@ -31,7 +31,7 @@
     /**
      * JNLP slave.
      */
-    private Process jnlp;
+    private transient Process jnlp;
 
     /**
      * Makes sure SECURITY-218 fix also applies to slaves.

From c7e0b799320b0f0163bd0aee07125d1950f828c4 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 20:26:56 -0800
Subject: [PATCH 11/12] Adjusted to the additional fix in remoting

---
 cli/src/main/java/hudson/cli/Connection.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/cli/src/main/java/hudson/cli/Connection.java b/cli/src/main/java/hudson/cli/Connection.java
index 7f0bd9bbb1b..1c1ada471fd 100644
--- a/cli/src/main/java/hudson/cli/Connection.java
+++ b/cli/src/main/java/hudson/cli/Connection.java
@@ -110,7 +110,7 @@ public void writeObject(Object o) throws IOException {
      */
     public <T> T readObject() throws IOException, ClassNotFoundException {
         ObjectInputStream ois = new ObjectInputStreamEx(in,
-                ClassFilter.DEFAULT.decorate(getClass().getClassLoader()));
+                getClass().getClassLoader(), ClassFilter.DEFAULT);
         return (T)ois.readObject();
     }
 

From cb588f93e57d3c1aa4ac972c7c9a3433d7cf1c79 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 7 Nov 2015 21:02:34 -0800
Subject: [PATCH 12/12] Anchroing to a bless version created from
 08456746a7ad0f08505017fed19e6c7501557d5a

---
 pom.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pom.xml b/pom.xml
index 1583deeb0e5..edc90a545dd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -174,7 +174,7 @@ THE SOFTWARE.
       <dependency>
         <groupId>org.jenkins-ci.main</groupId>
         <artifactId>remoting</artifactId>
-        <version>2.53-SNAPSHOT</version>
+        <version>2.53-20151108.042522-3</version>
       </dependency>
 
       <dependency>