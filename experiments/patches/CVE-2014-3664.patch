From 71a28615e33fe42e3cc7a34ef86e31ed5d87bc74 Mon Sep 17 00:00:00 2001
From: Jesse Glick <jglick@cloudbees.com>
Date: Wed, 20 Aug 2014 19:08:20 -0400
Subject: [PATCH] [FIXED SECURITY-131] Recode restOfPath before constructing
 URLs from it, so it cannot be used for directory traversal.

---
 core/src/main/java/hudson/Plugin.java     | 17 +++++------
 test/src/test/java/hudson/PluginTest.java | 47 +++++++++++++++++++++++++++++++
 2 files changed, 54 insertions(+), 10 deletions(-)
 create mode 100644 test/src/test/java/hudson/PluginTest.java

diff --git a/core/src/main/java/hudson/Plugin.java b/core/src/main/java/hudson/Plugin.java
index 20f671e8dcc..a5bda87da6a 100644
--- a/core/src/main/java/hudson/Plugin.java
+++ b/core/src/main/java/hudson/Plugin.java
@@ -30,19 +30,18 @@
 import hudson.model.listeners.ItemListener;
 import hudson.model.listeners.SaveableListener;
 import hudson.model.Descriptor.FormException;
-import org.kohsuke.stapler.MetaClass;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.File;
-import java.net.URL;
 
 import net.sf.json.JSONObject;
 import com.thoughtworks.xstream.XStream;
+import java.net.URI;
+import java.net.URISyntaxException;
 
 /**
  * Base class of Hudson plugin.
@@ -204,12 +203,6 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
         if(path.length()==0)
             path = "/";
 
-        if(path.indexOf("..")!=-1 || path.length()<1) {
-            // don't serve anything other than files in the sub directory.
-            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST);
-            return;
-        }
-
         // Stapler routes requests like the "/static/.../foo/bar/zot" to be treated like "/foo/bar/zot"
         // and this is used to serve long expiration header, by using Jenkins.VERSION_HASH as "..."
         // to create unique URLs. Recognize that and set a long expiration header.
@@ -219,7 +212,11 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
         long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : -1;
 
         // use serveLocalizedFile to support automatic locale selection
-        rsp.serveLocalizedFile(req, new URL(wrapper.baseResourceURL,'.'+path),expires);
+        try {
+            rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires);
+        } catch (URISyntaxException x) {
+            throw new IOException(x);
+        }
     }
 
 //
diff --git a/test/src/test/java/hudson/PluginTest.java b/test/src/test/java/hudson/PluginTest.java
new file mode 100644
index 00000000000..17f827a358d
--- /dev/null
+++ b/test/src/test/java/hudson/PluginTest.java
@@ -0,0 +1,47 @@
+/*
+ * The MIT License
+ *
+ * Copyright 2014 Jesse Glick.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package hudson;
+
+import javax.servlet.http.HttpServletResponse;
+import org.junit.Test;
+import org.junit.Rule;
+import org.jvnet.hudson.test.JenkinsRule;
+
+public class PluginTest {
+
+    @Rule public JenkinsRule r = new JenkinsRule();
+
+    //@Issue("SECURITY-131")
+    @Test public void doDynamic() throws Exception {
+        r.createWebClient().goTo("plugin/credentials/images/24x24/credentials.png", "image/png");
+        /* Collapsed somewhere before it winds up in restOfPath:
+        r.createWebClient().assertFails("plugin/credentials/images/../images/24x24/credentials.png", HttpServletResponse.SC_BAD_REQUEST);
+        */
+        r.createWebClient().assertFails("plugin/credentials/images/%2E%2E/images/24x24/credentials.png", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // IAE from TokenList.<init>
+        r.createWebClient().assertFails("plugin/credentials/images/%252E%252E/images/24x24/credentials.png", HttpServletResponse.SC_NOT_FOUND); // SECURITY-131
+        r.createWebClient().assertFails("plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png", HttpServletResponse.SC_NOT_FOUND); // just checking
+    }
+
+}